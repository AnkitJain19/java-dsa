// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class HelloWorld {
    static void largestSum(){
        int arr[]={-2,1,-3,4,-1,2,1,-5,4};        
        //ArrayList<Integer> a1 = new ArrayList<>();
        int sum=0;
        int start=0;
        int end=0;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<arr.length;i++){
            if(sum==0){
                start=i;
            }
            sum=sum+arr[i];

         if(max<sum){
               max=sum;
               end=i;
           }
            if(sum<0){
                sum=0;
            }

        }
        for(int i=start;i<=end;i++){
            System.out.print(arr[i]);
        }
        System.out.println(max);
    }
    static void sorting(){//dutuch national flag algorithm
       int arr[]={1,0,0,1,2,1,0,2};
        int low=0;
        int mid=0;
        int high=arr.length-1;
        while(mid<high){
            if(arr[mid]==0){
                int temp=arr[mid];
                arr[mid]=arr[low];
                arr[low]=temp;
                low++;
                mid++;
            }
            else if(arr[mid]==1){
                mid++;
            }
            else if(arr[mid]==2){
                int temp=arr[mid];
                arr[mid]=arr[high];
                arr[high]=temp;
                high--;
            }
        }
        for(int i=0;i<arr.length;i++){
            System.out.println(arr[i]);
        }
    }
    
    static void mergesort(){
        int arr1[]={1,2,3,9};
        int arr2[]={1,2,3,5,6};
        int arr3[]= new int[arr1.length+arr2.length];
        int i=0;
        int j=0;
        int k=0;
        while(i<arr1.length && j<arr2.length){
            if(arr1[i]<=arr2[j]){
                arr3[k]=arr1[i];
                i++;
                k++;
            }
            else {
                arr3[k]=arr2[j];
                j++;
                k++;
            }
        }
        while(i<arr1.length){
              arr3[k]=arr1[i];
                i++;
                k++;
        }
        while(j<arr2.length){
              arr3[k]=arr2[j];
                j++;
                k++;
        }
        for(int i1=0;i1<k;i1++){
            System.out.println(arr3[i1]);
        }
    }
    static void duplicateRemove(){
        String s="ddeuideduei";
                StringBuilder sb = new StringBuilder(s.length());
        boolean[] seen = new boolean[256];

        // Traverse through all characters
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);

            // Check if s[i] is present before it  
            if (!seen[c]) {
                sb.append(c);
                seen[c] = true;
            }
        }
        System.out.println(sb.toString());
    }
    static void reverseWord(){
        String s="my name is Ankit";
        String ch[]=s.split(" ");
        for(int i=0;i<ch.length;i++){
            String s1=reverse(ch[i])+" ";
            System.out.print(s1);
        }    
        // for(int i=0;i<ch.length;i++){
        //   System.out.println(ch[i]);
        // }
    }
    
    static String reverse(String s){
        char a[]=s.toCharArray();
        int n=s.length()-1;
        for(int i=0;i<a.length/2;i++){
            char temp=a[i];
            a[i]=a[n];
            a[n]=temp;
            n--;
        }
        s="";
        for(int i=0;i<a.length;i++){
            s=s+a[i];
        }
        
        return s;
    }
    public static void main(String[] args) {
        //sorting();
        duplicateRemove();
        reverseWord();
        //mergesort();
        // Scanner sc= new Scanner(System.in);
        // int n,k,j,m,p;
        // int beat=0;
        // int peat=0;
        // n=sc.nextInt();
        // k=sc.nextInt();
        // j=sc.nextInt();
        // m=sc.nextInt();
        // p=sc.nextInt();
        // if(n<=0 || k<=0 || j<0 || m<0 || p<0){
        //     System.out.println("Invalid");    
        // }
        // else{
        //     beat=m/k;
        //     m=m%k;
        //     peat=p/j;
        //     p=p%j;
        //     n=n-beat-peat;
        //     if(m!=0 || p!=0){
        //         n=n-1;
        //     }
        //     System.out.print(n);
        //}
        //largestSum();
    }
}
