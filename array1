public class Solution {
	// DO NOT MODIFY THE LIST
	public ArrayList<Integer> repeatedNumber(final List<Integer> A) {
	    
	    ArrayList<Integer> res = new ArrayList<>();
	    
	    Collections.sort(A);
	    int n = A.size();
	    int rep = -1;
	    int miss = -1;
	    long sum = A.get(0);
	    
	    for (int i = 1; i < n; i++) {
	        if (A.get(i).intValue() == A.get(i - 1).intValue()) {
	            rep = A.get(i);
	        }
            sum += A.get(i);
	    }
	    
	    miss = (int) ((1L * n * (1L * n + 1)) / 2 - sum + rep);
	    
	    res.add(rep);
	    res.add(miss);
	    
	    return res;
	    
	}
}
// // Online Java Compiler
// // Use this editor to write, compile and run your Java code online
import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
    String str="hellollslslslss";
    HashMap<Character,Integer> h1= new HashMap<>();
    for(int i= str.length()-1;i>0;i--){
        if(h1.containsKey(str.charAt(i))){
            int count = h1.get(str.charAt(i));  
            h1.put(str.charAt(i),++count);
        }
        else{
            h1.put(str.charAt(i),1);
        }
    System.out.println(h1);
    }
    }
}
// import java.util.Scanner;  
// public class CountOccuranceOfChar1  
// {  
// public static void main(String args[])   
// {  
// String str;  
// int i, len;  
// int counter[] = new int[256];  
// Scanner scanner = new Scanner(System.in);  
// System.out.print("Please enter a string: ");  
// //reading a string from the user  
// str = scanner.nextLine();  
// //finds the length of the string  
// len = str.length();  
// // loop through the string and count frequency of every character and store it in counter array  
// for (i = 0; i < len; i++)   
// {  
// counter[(int) str.charAt(i)]++;  
// }  
// //print Frequency of characters  
// for (i = 0; i < 256; i++)   
// {  
// if (counter[i] != 0)   
// {  
// //prints frequency of characters      
// System.out.println((char) i + " --> " + counter[i]);  
// }  
// }  
// }  
// }  
/*
    Time complexity : O(N * log(N))
    Space complexity : O(N)

    Where 'N' is the total number of elements in the array/list.
*/

public class Solution {
    // Function to merge the two subarrays.
    private static long merge(long arr[], int left, int mid, int right) {
        int i = left, j = mid, k = 0;
        long invCount = 0;
        long temp[] = new long[(right - left + 1)];

        while ((i < mid) && (j <= right)) {
            if (arr[i] <= arr[j]) {
                temp[k] = arr[i];
                ++k;
                ++i;
            } 
            else {
                temp[k] = arr[j];
                invCount += (mid - i);
                ++k;
                ++j;
            }
        }

        while (i < mid) {
            temp[k] = arr[i];
            ++k;
            ++i;
        }

        while (j <= right) {
            temp[k] = arr[j];
            ++k;
            ++j;
        }

        for (i = left, k = 0; i <= right; i++, k++) {
            arr[i] = temp[k];
        }

        return invCount;
    }

    // Function to split two subarrays and then merge them and count inversions.
    private static long mergeSort(long arr[], int left, int right) {
        long invCount = 0;

        if (right > left) {
            int mid = (right + left) / 2;

            /* 
                Divide the array into two parts
                total inversion count will be the
                sum of 'INVCOUNT' of left part +
                'INVCOUNT' of right part + 'INVCOUNT' of
                their combined part.
            */
            invCount = mergeSort(arr, left, mid);
            invCount += mergeSort(arr, mid + 1, right);

            // Merge both parts and count their combined inversions.
            invCount += merge(arr, left, mid + 1, right);
        }
        return invCount;
    }

    public static long getInversions(long arr[], int n) {
        return mergeSort(arr, 0, n - 1);
    }
}
class Solution {
    public List<Integer> majorityElement(int[] nums) {
       ArrayList<Integer> a1= new ArrayList<>();
       int e1= Integer.MIN_VALUE;
       int e2= Integer.MIN_VALUE;
       int c1=0;
       int c2=0;
       for(int i=0 ;i<nums.length;i++){
        if(c1==0 && e2!=nums[i]){
            c1=1;
            e1=nums[i];
        }
        else if(c2==0 && e1!=nums[i]){
            c2=1;
            e2=nums[i];
        }
        else if(nums[i]==e1){
            c1++;
        }
        else if(nums[i]==e2){
            c2++;
        }
        else{
            c1--;
            c2--;
        }
       }
       c1=0;
       c2=0;
       for(int i=0; i<nums.length;i++){
        if(nums[i]==e1)c1++;
        if(nums[i]==e2)c2++;
       }
       int b= nums.length;
       int n=(int)(b/3)+1;
       if(c1>=n) a1.add(e1);
       if(c2>=n) a1.add(e2);
       return a1; 
    }
}
