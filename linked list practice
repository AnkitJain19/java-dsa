/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
   public int lengthCycle(ListNode head) {
ListNode fast =head;
ListNode slow= head;
while(fast != null && fast.next != null) {
	fast =fast.next.next;
	slow =slow.next;
	if(fast ==slow) {
		ListNode temp =slow;
		int length=0;
		do {
			temp=temp.next;
			length++;
		}while(temp !=slow);
		return length;
	}
}return 0;
}
public ListNode detectCycle(ListNode head) {
int length=0;
ListNode fast =head;
ListNode slow= head;
while(fast != null && fast.next != null) {
	fast =fast.next.next;
	slow =slow.next;
	if(fast ==slow) {
	length=lengthCycle(slow);
	break;
	}
}
if(length==0) {
	return null;
}
ListNode f= head;
ListNode s= head;
while(length>0) {
	s=s.next;
	length--;
}
while(f!=s) {
	f=f.next;
	s=s.next;
}
return f;
}
}
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
    ListNode mid = middleNode(head);
    ListNode head2 = reverseList(mid);
    ListNode rereverseHead = head2;
    while(head != null && head2 != null) {
    	if(head.val!=head2.val) {
    		break;
    	}
    	head=head.next;
    	head2=head2.next;
    }
    reverseList(rereverseHead);
    return (head==null || head2==null);
}
public ListNode middleNode(ListNode head) {
 ListNode f =head;
 ListNode s = head;
 while(f != null && f.next != null) {
	 s=s.next;
	 f=f.next.next;
 }
 return s;
}
public ListNode reverseList(ListNode head) {
	if(head == null){
        return head;
    }
	ListNode prev= null;
	ListNode pres= head;
	ListNode next=pres.next;
	while(pres != null) {
		pres.next=prev;
		prev =pres;
		pres=next;
		
		if(next != null) {
			next = next.next;	
		}
	}
    return prev;
}
}
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast =head;
        ListNode slow =head;
        while(fast != null && fast.next !=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                return true;
            }
        }return false;
    }
}
