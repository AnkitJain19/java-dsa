// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
    //Given an integer array Arr of size N the task is to find the count of elements whose value is greater than all of its prior elements.

//Note : 1st element of the array should be considered in the count of the result.
    // int arr[]={7,4,8,2,9};
    // int count=1;
    // int max=arr[0];
    // for(int i=1; i<arr.length;i++){
    //     if(arr[i]>max){
    //         count++;
    //         max=arr[i];
    //     }
    // }
    // System.out.println(count);
    //A parking lot in a mall has RxC number of parking spaces. Each parking space will either be  empty(0) or full(1). The status (0/1) of a parking space is represented as the element of the matrix. The task is to find index of the prpeinzta row(R) in the parking lot that has the most of the parking spaces full(1).
    // Scanner sc= new Scanner(System.in);
    // int row= sc.nextInt();
    // int col= sc.nextInt();
    // int arr[][] =new int[row][col];
    // System.out.println("hello");
    // for(int i=0; i<row;i++){
    //     for(int j=0;j<col;j++){
    //         arr[i][j]=sc.nextInt();
    //     }
    // }
    // int count=0;
    // int max1=0;
    // for(int i=0; i<row;i++){
    //     for(int j=0;j< col;j++){
    //         if(arr[i][j]==1){
    //             count++;
    //           max1=Math.max(max1,count);  
    //         }
    //         else{
    //             count=0;
    //         }
    //     }
    // }
    // System.out.println(max1);
    // 
   // A party has been organised on cruise. The party is organised for a limited time(T). The number of guests entering (E[i]) and leaving (L[i]) the party at every hour is represented as elements of the array. The task is to find the maximum number of guests present on the cruise at any given instance within T hours.
// int a[]={7,0,5,1,3};
// int b[]={1,2,1,3,4};
// int i=0;
// int max1=0,sum=0;
// while(i<b.length){
//     sum=sum+a[i]-b[i];
//     max1=Math.max(max1,sum);
//     i++;
//  }
//   System.out.println(max1);
// At a fun fair, a street vendor is selling different colours of balloons. He sells N number of different colours of balloons (B[]). The task is to find the colour (odd) of the balloon which is present odd number of times in the bunch of balloons.

// Note: If there is more than one colour which is odd in number, then the first colour in the array which is present odd number of times is displayed. The colours of the balloons can all be either upper case or lower case in the array. If all the inputs are even in number, display the message “All are even”.

    // char a[]={'G','b','b','g','y','y'};
    // boolean flag=false;
    // HashMap<Character,Integer> h1= new HashMap<>();
    // for(int i=0;i<a.length;i++){
    //     Character ch=Character.toLowerCase(a[i]);
    //     if(h1.containsKey(ch)){
    //         h1.put(ch,h1.get(ch)+1);    
    //     }
    //     else{
    //         h1.put(ch,1);
    //     }
    // }
    //     for (Map.Entry<Character, Integer> entry : h1.entrySet())
    //     {
    //         if(entry.getValue()%2!=0){
    //             System.out.println(entry.getKey() + " " + entry.getValue());
    //         flag=true;
    //         }
    //     }
    //     if(flag==false){
    // System.out.println("All the nos are even");
    //     }
    //Selection of MPCS exams include a fitness test which is conducted on ground. There will be a batch of 3 trainees, appearing for running test in track for 3 rounds. You need to record their oxygen level after every round. After trainee are finished with all rounds, calculate for each trainee his average oxygen level over the 3 rounds and select one with highest oxygen level as the most fit trainee. If more than one trainee attains the same highest average level, they all need to be selected.

//Display the most fit trainee (or trainees) and the highest average oxygen level.

//Note:

//The oxygen value entered should not be accepted if it is not in the range between 1 and 100.

//Average Oxygen Values should be rounded.

  Scanner sc= new Scanner(System.in);
  int row= sc.nextInt();
  int col=sc.nextInt();
  int arr[][]= new int[row][col];
  int avg[]= new int[row];
  for(int i=0;i<row;i++){
      for(int j=0;j<col;j++){
             arr[i][j]=sc.nextInt();
          if(arr[i][j]<1 && arr[i][j]>100)
          System.out.println("Invalid input");
      }
  }
  int max1=0;
  int sum;
  for(int i=0; i<row;i++){
       sum=0;
      for(int j=0;j<col;j++){
          sum=sum+arr[i][j];
  }
            avg[i]=sum/3;
    max1=Math.max(avg[i],max1);
}

for(int i=0;i<row;i++){
    if(avg[i]==max1){
        System.out.println("Trainee :"+(i+1));
        System.out.println("maximum :"+max1);
    }
    else if(avg[i]<70){
      System.out.println("All the trainee is unfit");
  }  
}
  
    }
}
