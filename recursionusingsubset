/******************************************************************************

                            Online Java Compiler.
                Code, Compile, Run and Debug java program online.
Write your code in this editor and press "Run" button to execute it.

*******************************************************************************/
import java.util.*;
public class Main{
static String skipAppnotApple(String up){
    if(up.isEmpty()){
        return " ";
    }   
    if(up.startsWith("app") && !up.startsWith("apple")){
        return skipAppnotApple(up.substring(3));
    }
    else{
        return up.charAt(0)+skipAppnotApple(up.substring(1));
    }}
static void subset(String p,String up){
    if(up.isEmpty()){
        System.out.println(p);
        
    }
    char ch = up.charAt(0);
    subset(p+ch,up.substring(1));
    subset(p,up.substring(1));
}
//pattern of taking some elements and removing some is know as subset pattern
static ArrayList<String> subset1(String p,String up){
    if(up.isEmpty()){
    ArrayList<String> list = new ArrayList<>();
       list.add(p);
        return list ;
    }
    char ch = up.charAt(0);
    ArrayList<String> left= subset1(p+ch,up.substring(1));
    ArrayList<String> right= subset1(p,up.substring(1));
    left.addAll(right);
    return left;
}
static ArrayList<String> subsetascii(String p,String up){
    if(up.isEmpty()){
    ArrayList<String> list = new ArrayList<>();
       list.add(p);
        return list ;
    }
    char ch = up.charAt(0);
    ArrayList<String> left= subsetascii(p+ch,up.substring(1));
    ArrayList<String> as=subsetascii(p+(ch+0),up.substring(1));
    ArrayList<String> right= subsetascii(p,up.substring(1));
    left.addAll(right);
    left.addAll(as);
    return left;
}
//time complexity-o(n*2^n)
static List<List<Integer>> subsetarray(int []arr){
    List<List<Integer>> outer= new ArrayList<>();
    outer.add(new ArrayList<>());
    for(int num :arr){
        int n=outer.size();
        System.out.println(n);
        for(int i=0; i< n;i++){
            List<Integer> internal = new ArrayList<>(outer.get(i));
           internal.add(num);
           outer.add(internal);
        }
    }
    return outer;
}
static List<List<Integer>> subsetduplicatearray(int []arr){
    Arrays.sort(arr);
    List<List<Integer>> outer= new ArrayList<>();
    outer.add(new ArrayList<>());
    int start=0;
    int end=0;
    for(int i=0;i<arr.length;i++){
    start=0;
    if(i>0 && arr[i]>arr[i-1]){
        start=end+1;
    }
    end=outer.size()-1;
    int n= outer.size();
    for(int j=start; j<n;j++){
            List<Integer> internal = new ArrayList<>(outer.get(j));
           internal.add(arr[j]);
           outer.add(internal);
        }
    }
    return outer;
}
	public static void main(String[] args) {
//    System.out.println(skipAppnotApple("appleappleappapple"));
//subset("","apple");
   //   System.out.println(subsetascii("","apple"));
      int arr[]= {1,2,2,3,3};
      List<List<Integer>> ans = subsetduplicatearray(arr);
      for(List<Integer> list :ans){
          System.out.print(list);
      }
	}
}
